/*
 * Copyright (c) 2013, Diogo Kollross
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer. Redistributions in binary form must
 * reproduce the above copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided with the
 * distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

import java.security.MessageDigest;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

String decrypt(text, plainKey) {
	MessageDigest sha = MessageDigest.getInstance("SHA-1");
	key = sha.digest(plainKey.getBytes());
	key = Arrays.copyOf(key, 16);

	Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
	SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
	cipher.init(Cipher.DECRYPT_MODE, secretKey);
	String decryptedString = new String(cipher.doFinal(DatatypeConverter.parseBase64Binary(text)));
	return decryptedString;
}

String password = Macros.input(view, "Password");
if (password == null || password.length() == 0) {
	return;
}

String text = textArea.getSelectedText();
if (text == null) {
	textArea.selectAll();
}

text = textArea.getSelectedText();
textArea.setSelectedText(decrypt(text, password));
